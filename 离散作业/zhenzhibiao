#include<iostream>
#include<unordered_map>
#include<vector>
#include<queue>
#include<stack>
#include<string>
#include<string.h>
#include<algorithm>
#include<set>
using namespace std;
stack<char>s1,s2; 
set<char>set1;
unordered_map<char,int>mp;

int hequ(int a,int b){
	return a&b;
}
int xiqu(int a,int b){
	return a|b;
}
int tiaojian(int a,int b){
	return (!a)|b;
}
int shuangtiao(int a,int b){
	return a==b;
}
int fei(int a){
	return !a;
}

stack<char>temp;int countt=0;

void dfs(vector<char>&v,int end,int step,vector<char>&v1){
	 
	if(step==end){                            
		int count=0;int ans; 
		    if(countt==0){
				for(unordered_map<char,int>::iterator it=mp.begin();it!=mp.end();it++){
					cout<<it->first<<' ';
						}
						cout<<'\n';
						countt++;
			}
		
			for(vector<char>::iterator it=v1.begin();it!=v1.end();it++){
						if(*it!='*'&&*it!='/'&&*it!='+'&&*it!='-'&&*it!='!'){
							temp.push(*it);
							
						}
						else{
						if(*it=='*'){
							int temp1,temp2;
							temp1=mp[temp.top()];
							temp.pop();
							if(count==0){
							temp2=mp[temp.top()];
							temp.pop();
							ans=hequ(temp1,temp2);
							count++;
							}
							else{
								ans=hequ(ans,temp1);
							}
						} 
						else if(*it=='!'){
						int temp1;
						temp1=mp[temp.top()];
						temp.pop();
						if(count==0){
						
						ans=fei(temp1);
													
						count++;
							}
							else{
								ans=fei(ans);
									}
								}
						else if(*it=='/'){
							int temp1,temp2;
							temp1=mp[temp.top()];
							temp.pop();
							if(count==0){
							temp2=mp[temp.top()];
							temp.pop();
							ans=xiqu(temp1,temp2);
							
							count++;
							}
							else{
									ans=xiqu(ans,temp1);
										}
						}
						else if(*it=='+'){
							int temp1,temp2;
							temp1=mp[temp.top()];
							temp.pop();
							if(count==0){
							temp2=mp[temp.top()];
							temp.pop();
							ans=tiaojian(temp1,temp2);
							count++;
							}
							else{
									ans=tiaojian(ans,temp1);
									}
						}
						else{
							int temp1,temp2;
							temp1=mp[temp.top()];
							temp.pop();
							if(count==0){
							temp2=mp[temp.top()];
							temp.pop();
							ans=shuangtiao(temp1,temp2);
							count++;
							}
							else{
								  ans=shuangtiao(ans,temp1);
									}
							
						 }
						}
					}
					for(unordered_map<char,int>::iterator it=mp.begin();it!=mp.end();it++){
											cout<<it->second<<' ';
										}
					cout<<ans<<endl;
					return ;
	}
	for(int i=0;i<2;i++){
		mp[v[step]]=i;
	  dfs(v,end,step+1,v1);
		
	}
	
}


int main(){
	//非，合取，析取，条件，双条件分别由!乘除加减代替
	string str;
	cin>>str;
	//实现
	int size=str.size();
	for(int i=0;i<size;i++){
		if(str[i]=='('){
			s2.push(str[i]);
		}
		else if(str[i]==')'){
			while(s2.top()!='('){
				s1.push(s2.top());           //栈越界 
				s2.pop();
			}
		}
		else if(str[i]=='!'){
			s2.push(str[i]);
		}
		else if(str[i]=='*'){
			if(!s2.empty()){
						  if(s2.top()=='*'||s2.top()=='/'||s2.top()=='!'){
							while(!s2.empty()&&(s2.top()=='*'||s2.top()=='/'||s2.top()=='!')){
								s1.push(s2.top());
								s2.pop();
						     	}
						     	s2.push(str[i]);
					     	}
					     	else{
							 	s2.push(str[i]);
							 }
						}
						     else{
							   s2.push(str[i]);
					       }
		}
		else if(str[i]=='/'){
			if(!s2.empty()){
			  if(s2.top()=='*'||s2.top()=='/'||s2.top()=='!'){
				while(!s2.empty()&&(s2.top()=='*'||s2.top()=='/'||s2.top()=='!')){
					s1.push(s2.top());
					s2.pop();
			     	}
			     	s2.push(str[i]);
		     	}
		     	else{
				 	s2.push(str[i]);
				 }
			}
			     else{
				   s2.push(str[i]);
		       }
			
		}
		else if(str[i]=='+'){
			if(!s2.empty()){
			   if(s2.top()=='*'||s2.top()=='/'||s2.top()=='+'||s2.top()=='!'){
				  while(!s2.empty()&&s2.top()!='*'&&s2.top()!='/'&&s2.top()!='+'&&s2.top()!='!'){
									s1.push(s2.top());
									s2.pop();
								}
			   }
			}
			else{
				s2.push(str[i]);
			}
		}
		else if(str[i]=='-'){
			if(!s2.empty()){
			   if(s2.top()=='('){
				s2.push(str[i]);
			  }
			
			else{
				while(!s2.empty()&&(s2.top()=='*'||s2.top()=='/'||s2.top()=='+'||s2.top()=='-'||s2.top()=='!')){
													s1.push(s2.top());
													s2.pop();
												}
			 }
			}
			else{
				s2.push(str[i]);
			}
			
		}
		else{
			s1.push(str[i]);
		}
		
	} 
	if(!s2.empty()){
				if(s2.top()!='('&&s2.top()!=')'){
					s1.push(s2.top());
					s2.pop();
				}
				else{
					s2.pop();
				}
			}
			//test
//			while(!s1.empty()){
//				char temp=s1.top();
//				cout<<temp;
//				s1.pop();
//			}
//			cout<<"==================";
	vector<char>v1,v2;int count=0;
	while(!s1.empty()){
		v1.push_back(s1.top());
		s1.pop();
	}
	reverse(v1.begin(),v1.end());
	for(vector<char>::iterator it=v1.begin();it!=v1.end();it++){
		if(*it!='*'&&*it!='/'&&*it!='+'&&*it!='-'&&*it!='!'&&!set1.count(*it)){
			set1.insert(*it);
			v2.push_back(*it);
			count++;
		}
	}
	//全排列
	int end=count;
	dfs(v2,end,0,v1);
	
	
	return 0;
}
